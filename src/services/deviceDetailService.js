// src/services/deviceDetailService.js
import { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';
import { db } from './firebaseConfig';

// üîπ L·∫•y th√¥ng tin thi·∫øt b·ªã
export async function getThietBiById(id) {
    try {
        // console.log('üîç ƒêang truy v·∫•n thi·∫øt b·ªã v·ªõi id:', id);

        // ∆Øu ti√™n string (chu·∫©n nh·∫•t)
        let snap = await getDoc(doc(db, 'thiet_bi', id.toString()));
        if (snap.exists()) {
            const data = snap.data();
            console.log('‚úÖ Thi·∫øt b·ªã t√¨m th·∫•y (string id):', data);
            return { id: snap.id, ...data };
        }

        // Fallback n·∫øu truy·ªÅn nh·∫ßm d·∫°ng s·ªë ‚Üí th·ª≠ l·∫°i v·ªõi s·ªë
        if (!isNaN(id)) {
            snap = await getDoc(doc(db, 'thiet_bi', Number(id)));
            if (snap.exists()) {
                const data = snap.data();
                console.log('‚úÖ Thi·∫øt b·ªã t√¨m th·∫•y (numeric id):', data);
                return { id: snap.id, ...data };
            }
        }

        console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã v·ªõi id:', id);
        return null;
    } catch (e) {
        console.error('‚ùå L·ªói trong getThietBiById:', e);
        return null;
    }
}


// üîπ L·∫•y chi ti·∫øt y√™u c·∫ßu theo y√™uCauId v√† thietBiId
export async function getChiTietYeuCau(yeuCauId, thietBiId) {
    const q = query(
        collection(db, 'chi_tiet_yeu_cau'),
        where('yeuCauId', '==', yeuCauId),
        where('thietBiId', '==', thietBiId)
    );
    const snapshot = await getDocs(q);
    if (snapshot.empty) return null;
    const data = snapshot.docs[0].data();
    return { id: snapshot.docs[0].id, ...data };
}

// üîπ L·∫•y y√™u c·∫ßu
// export async function getYeuCauById(id) {
//     const snap = await getDoc(doc(db, 'yeu_cau', id));
//     if (!snap.exists()) return null;
//     return { id: snap.id, ...snap.data() };
// }

export async function getYeuCauById(id) {
    try {
        const stringId = id.toString();
        // console.log('üìÑ B·∫Øt ƒë·∫ßu getYeuCauById v·ªõi id:', stringId);

        let snap = await getDoc(doc(db, 'yeu_cau', stringId));
        if (snap.exists()) {
            const data = snap.data();
            // console.log('‚úÖ T√¨m th·∫•y y√™u c·∫ßu theo docId:', data);
            return { id: snap.id, ...data };
        }

        // Fallback n·∫øu c·∫ßn (kh√¥ng n√™n c·∫ßn, nh∆∞ng c·ª© th√™m cho ch·∫Øc)
        const q = query(collection(db, 'yeu_cau'), where('id', '==', Number(id)));
        const snapshot = await getDocs(q);
        if (!snapshot.empty) {
            const data = snapshot.docs[0].data();
            // console.log('‚úÖ T√¨m th·∫•y y√™u c·∫ßu theo field id:', data);
            return { id: snapshot.docs[0].id, ...data };
        }

        throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu v·ªõi id = ${id}`);
    } catch (e) {
        console.error('‚ùå L·ªói trong getYeuCauById:', e);
        return null;
    }
}


// üîπ L·∫•y t√™n ƒë∆°n v·ªã t·ª´ y√™u c·∫ßu
export async function getTenDonViById(donViId) {
    try {
        // console.log('üè¢ B·∫Øt ƒë·∫ßu getTenDonViById v·ªõi donViId:', donViId);

        if (donViId === undefined || donViId === null) {
            throw new Error('‚ùå donViId kh√¥ng h·ª£p l·ªá (undefined ho·∫∑c null)');
        }

        const docId = donViId.toString();
        const snap = await getDoc(doc(db, 'don_vi', docId));

        if (snap.exists()) {
            const data = snap.data();
            // console.log('‚úÖ T√¨m th·∫•y ƒë∆°n v·ªã theo docId:', data);
            return data.tenDonVi || 'Kh√¥ng r√µ';
        }

        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y docId "${docId}", th·ª≠ fallback theo field id`);
        const q = query(collection(db, 'don_vi'), where('id', '==', Number(donViId)));
        const snapshot = await getDocs(q);

        if (!snapshot.empty) {
            const data = snapshot.docs[0].data();
            // console.log('‚úÖ T√¨m th·∫•y ƒë∆°n v·ªã theo field id:', data);
            return data.tenDonVi || 'Kh√¥ng r√µ';
        }

        throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã v·ªõi id = ${donViId}`);
    } catch (e) {
        console.error('‚ùå L·ªói trong getTenDonViById:', e);
        return 'Kh√¥ng r√µ';
    }
}



// üîπ L·∫•y v·ªã tr√≠ chu·ªói t·ª´ thi·∫øt b·ªã ‚Üí ph√≤ng ‚Üí t·∫ßng ‚Üí d√£y
export async function getViTriByThietBi(thietBi) {
    try {
        console.log('‚ñ∂Ô∏è START getViTriByThietBi');
        console.log('üìå Input thietBi:', thietBi);

        if (!thietBi?.phongId) {
            throw new Error('‚ùå Thi·∫øt b·ªã kh√¥ng c√≥ phongId');
        }

        // console.log('üîç ƒêang l·∫•y phongId =', thietBi.phongId);
        const phongSnap = await getDoc(doc(db, 'phong', thietBi.phongId.toString()));
        if (!phongSnap.exists()) {
            throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng v·ªõi id = ${thietBi.phongId}`);
        }

        const phong = phongSnap.data();
        // console.log('‚úÖ T√¨m ƒë∆∞·ª£c ph√≤ng:', phong);

        const tangId = phong?.tangId?.toString();
        const dayId = phong?.dayId?.toString();

        // console.log('üìå tangId =', tangId);
        // console.log('üìå dayId =', dayId);

        if (!tangId) throw new Error('‚ùå phong.tangId kh√¥ng h·ª£p l·ªá');
        if (!dayId) throw new Error('‚ùå phong.dayId kh√¥ng h·ª£p l·ªá');

        const tangSnap = await getDoc(doc(db, 'tang', tangId));
        if (!tangSnap.exists()) throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y t·∫ßng v·ªõi id = ${tangId}`);
        const tang = tangSnap.data();
        // console.log('‚úÖ T√¨m ƒë∆∞·ª£c t·∫ßng:', tang);

        const daySnap = await getDoc(doc(db, 'day', dayId));
        if (!daySnap.exists()) throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y d√£y v·ªõi id = ${dayId}`);
        const day = daySnap.data();
        // console.log('‚úÖ T√¨m ƒë∆∞·ª£c d√£y:', day);

        const result = [day?.tenDay, tang?.tenTang, phong?.tenPhong].filter(Boolean).join(' > ');
        // console.log('üìå Chu·ªói v·ªã tr√≠ tr·∫£ v·ªÅ:', result);
        return result || 'Kh√¥ng r√µ';
    } catch (e) {
        console.error('‚ùå L·ªói khi load v·ªã tr√≠ thi·∫øt b·ªã:', e);
        return 'Kh√¥ng r√µ';
    }
}



// üîπ L·∫•y ·∫£nh v√† video minh ch·ª©ng c·ªßa chi ti·∫øt y√™u c·∫ßu
export async function getMinhChungByChiTietId(chiTietYeuCauId) {
    try {
        const stringId = chiTietYeuCauId.toString();
        const numberId = Number(chiTietYeuCauId);

        const results = [];

        console.log('üì∏ T√¨m minh ch·ª©ng v·ªõi ID:', stringId);

        // Truy theo string ID
        const q1 = query(
            collection(db, 'anh_minh_chung_bao_cao'),
            where('chiTietBaoCaoId', '==', stringId)
        );
        const snap1 = await getDocs(q1);
        snap1.forEach(doc => results.push(doc.data()));

        // N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£, th·ª≠ theo number
        if (results.length === 0 && !isNaN(numberId)) {
            console.warn('üìõ Kh√¥ng t√¨m th·∫•y ·∫£nh theo string, th·ª≠ theo s·ªë:', numberId);
            const q2 = query(
                collection(db, 'anh_minh_chung_bao_cao'),
                where('chiTietBaoCaoId', '==', numberId)
            );
            const snap2 = await getDocs(q2);
            snap2.forEach(doc => results.push(doc.data()));
        }

        console.log('‚úÖ S·ªë ·∫£nh l·∫•y ƒë∆∞·ª£c:', results.length);

        const images = results
            .filter(d => d.type?.toLowerCase() === 'image')
            .map(d => d.urlAnh);
        const video = results.find(d => d.type?.toLowerCase() === 'video')?.urlAnh || null;

        return { images, video };
    } catch (e) {
        console.error('‚ùå L·ªói khi load ·∫£nh minh ch·ª©ng:', e);
        return { images: [], video: null };
    }
}